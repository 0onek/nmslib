/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QueryService_H
#define QueryService_H

#include <thrift/TDispatchProcessor.h>
#include "protocol_types.h"

namespace similarity {

class QueryServiceIf {
 public:
  virtual ~QueryServiceIf() {}
  virtual void knnQuery(ReplyEntryList& _return, const int32_t k, const std::string& queryObj, const bool retObj) = 0;
};

class QueryServiceIfFactory {
 public:
  typedef QueryServiceIf Handler;

  virtual ~QueryServiceIfFactory() {}

  virtual QueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(QueryServiceIf* /* handler */) = 0;
};

class QueryServiceIfSingletonFactory : virtual public QueryServiceIfFactory {
 public:
  QueryServiceIfSingletonFactory(const boost::shared_ptr<QueryServiceIf>& iface) : iface_(iface) {}
  virtual ~QueryServiceIfSingletonFactory() {}

  virtual QueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(QueryServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<QueryServiceIf> iface_;
};

class QueryServiceNull : virtual public QueryServiceIf {
 public:
  virtual ~QueryServiceNull() {}
  void knnQuery(ReplyEntryList& /* _return */, const int32_t /* k */, const std::string& /* queryObj */, const bool /* retObj */) {
    return;
  }
};


class QueryService_knnQuery_args {
 public:

  static const char* ascii_fingerprint; // = "7E2C98E75504E1229F703BD18FE1300F";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x2C,0x98,0xE7,0x55,0x04,0xE1,0x22,0x9F,0x70,0x3B,0xD1,0x8F,0xE1,0x30,0x0F};

  QueryService_knnQuery_args(const QueryService_knnQuery_args&);
  QueryService_knnQuery_args& operator=(const QueryService_knnQuery_args&);
  QueryService_knnQuery_args() : k(0), queryObj(), retObj(0) {
  }

  virtual ~QueryService_knnQuery_args() throw();
  int32_t k;
  std::string queryObj;
  bool retObj;

  void __set_k(const int32_t val);

  void __set_queryObj(const std::string& val);

  void __set_retObj(const bool val);

  bool operator == (const QueryService_knnQuery_args & rhs) const
  {
    if (!(k == rhs.k))
      return false;
    if (!(queryObj == rhs.queryObj))
      return false;
    if (!(retObj == rhs.retObj))
      return false;
    return true;
  }
  bool operator != (const QueryService_knnQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_knnQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryService_knnQuery_args& obj);
};


class QueryService_knnQuery_pargs {
 public:

  static const char* ascii_fingerprint; // = "7E2C98E75504E1229F703BD18FE1300F";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x2C,0x98,0xE7,0x55,0x04,0xE1,0x22,0x9F,0x70,0x3B,0xD1,0x8F,0xE1,0x30,0x0F};


  virtual ~QueryService_knnQuery_pargs() throw();
  const int32_t* k;
  const std::string* queryObj;
  const bool* retObj;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryService_knnQuery_pargs& obj);
};

typedef struct _QueryService_knnQuery_result__isset {
  _QueryService_knnQuery_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _QueryService_knnQuery_result__isset;

class QueryService_knnQuery_result {
 public:

  static const char* ascii_fingerprint; // = "68500F060AF1AEF1EFF1B217FA0CBC55";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x50,0x0F,0x06,0x0A,0xF1,0xAE,0xF1,0xEF,0xF1,0xB2,0x17,0xFA,0x0C,0xBC,0x55};

  QueryService_knnQuery_result(const QueryService_knnQuery_result&);
  QueryService_knnQuery_result& operator=(const QueryService_knnQuery_result&);
  QueryService_knnQuery_result() {
  }

  virtual ~QueryService_knnQuery_result() throw();
  ReplyEntryList success;
  QueryException err;

  _QueryService_knnQuery_result__isset __isset;

  void __set_success(const ReplyEntryList& val);

  void __set_err(const QueryException& val);

  bool operator == (const QueryService_knnQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QueryService_knnQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_knnQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryService_knnQuery_result& obj);
};

typedef struct _QueryService_knnQuery_presult__isset {
  _QueryService_knnQuery_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _QueryService_knnQuery_presult__isset;

class QueryService_knnQuery_presult {
 public:

  static const char* ascii_fingerprint; // = "68500F060AF1AEF1EFF1B217FA0CBC55";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x50,0x0F,0x06,0x0A,0xF1,0xAE,0xF1,0xEF,0xF1,0xB2,0x17,0xFA,0x0C,0xBC,0x55};


  virtual ~QueryService_knnQuery_presult() throw();
  ReplyEntryList* success;
  QueryException err;

  _QueryService_knnQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueryService_knnQuery_presult& obj);
};

class QueryServiceClient : virtual public QueryServiceIf {
 public:
  QueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  QueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void knnQuery(ReplyEntryList& _return, const int32_t k, const std::string& queryObj, const bool retObj);
  void send_knnQuery(const int32_t k, const std::string& queryObj, const bool retObj);
  void recv_knnQuery(ReplyEntryList& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class QueryServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<QueryServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (QueryServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_knnQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QueryServiceProcessor(boost::shared_ptr<QueryServiceIf> iface) :
    iface_(iface) {
    processMap_["knnQuery"] = &QueryServiceProcessor::process_knnQuery;
  }

  virtual ~QueryServiceProcessor(){};
};

class QueryServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QueryServiceProcessorFactory(const ::boost::shared_ptr< QueryServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< QueryServiceIfFactory > handlerFactory_;
};

class QueryServiceMultiface : virtual public QueryServiceIf {
 public:
  QueryServiceMultiface(std::vector<boost::shared_ptr<QueryServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~QueryServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<QueryServiceIf> > ifaces_;
  QueryServiceMultiface() {}
  void add(boost::shared_ptr<QueryServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void knnQuery(ReplyEntryList& _return, const int32_t k, const std::string& queryObj, const bool retObj) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->knnQuery(_return, k, queryObj, retObj);
    }
    ifaces_[i]->knnQuery(_return, k, queryObj, retObj);
    return;
  }

};

} // namespace

#endif
